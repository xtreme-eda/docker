From 7626d1218a09156e69ede88d9ddcf380e29b95dd Mon Sep 17 00:00:00 2001
From: Michal Orsak <xorsak01@stud.fit.vutbr.cz>
Date: Fri, 21 Dec 2018 11:50:41 +0100
Subject: [PATCH 1/3] support for virtual methods in AST

---
 src/V3AstNodes.h | 4 ++++
 src/V3EmitC.cpp  | 5 ++---
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/V3AstNodes.h b/src/V3AstNodes.h
index 90b30c68..be427105 100644
--- a/src/V3AstNodes.h
+++ b/src/V3AstNodes.h
@@ -5535,6 +5535,7 @@ private:
     bool	m_funcPublic:1;		// From user public task/function
     bool	m_isInline:1;		// Inline function
     bool	m_isStatic:1;		// Function is declared static (no this)
+    bool	m_isVirtual:1;		// Function is declared as virtual
     bool	m_symProlog:1;		// Setup symbol table for later instructions
     bool	m_entryPoint:1;		// User may call into this top level function
     bool	m_pure:1;		// Pure function
@@ -5557,6 +5558,7 @@ public:
 	m_funcPublic = false;
 	m_isInline = false;
 	m_isStatic = true;	// Note defaults to static, later we see where thisp is needed
+	m_isVirtual = false;
 	m_symProlog = false;
 	m_entryPoint = false;
 	m_pure = false;
@@ -5609,6 +5611,8 @@ public:
     void	isInline(bool flag) { m_isInline = flag; }
     bool	isStatic() const { return m_isStatic; }
     void	isStatic(bool flag) { m_isStatic = flag; }
+    bool	isVirtual() const { return m_isVirtual; }
+    void	isVirtual(bool flag) { m_isVirtual = flag; }
     bool	symProlog() const { return m_symProlog; }
     void	symProlog(bool flag) { m_symProlog = flag; }
     bool	entryPoint() const { return m_entryPoint; }
diff --git a/src/V3EmitC.cpp b/src/V3EmitC.cpp
index e254d4ac..fe6f40b7 100644
--- a/src/V3EmitC.cpp
+++ b/src/V3EmitC.cpp
@@ -2327,6 +2327,7 @@ void EmitCImp::emitIntFuncDecls(AstNodeModule* modp) {
 	    ofp()->putsPrivate(funcp->declPrivate());
 	    if (funcp->ifdef()!="") puts("#ifdef "+funcp->ifdef()+"\n");
 	    if (funcp->isStatic()) puts("static ");
+	    if (funcp->isVirtual()) puts("virtual ");
 	    puts(funcp->rtnTypeVoid()); puts(" ");
 	    puts(funcp->name()); puts("("+cFuncArgs(funcp)+");\n");
 	    if (funcp->ifdef()!="") puts("#endif // "+funcp->ifdef()+"\n");
@@ -2528,10 +2529,8 @@ void EmitCImp::emitInt(AstNodeModule* modp) {
     ofp()->putsPrivate(false);  // public:
     if (optSystemC() && modp->isTop()) {
 	puts("SC_CTOR("+modClassName(modp)+");\n");
-	puts("virtual ~"+modClassName(modp)+"();\n");
     } else if (optSystemC()) {
 	puts("VL_CTOR("+modClassName(modp)+");\n");
-	puts("~"+modClassName(modp)+"();\n");
     } else {
 	if (modp->isTop()) {
 	    puts("/// Construct the model; called by application code\n");
@@ -2540,8 +2539,8 @@ void EmitCImp::emitInt(AstNodeModule* modp) {
 	}
 	puts(modClassName(modp)+"(const char* name=\"TOP\");\n");
 	if (modp->isTop()) puts("/// Destroy the model; called (often implicitly) by application code\n");
-	puts("~"+modClassName(modp)+"();\n");
     }
+    puts("virtual ~"+modClassName(modp)+"();\n");
     if (v3Global.opt.trace()) {
 	if (modp->isTop()) puts("/// Trace signals in the model; called by application code\n");
         puts("void trace("+v3Global.opt.traceClassBase()+"C* tfp, int levels, int options=0);\n");
-- 
2.17.1

